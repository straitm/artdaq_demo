# FHiCL document used to run the "driver" executable.

events_to_generate: 1000
run_number: 101
transition_timeout: 30

services:
{
  TimeTracker: {}
}

fragment_receiver:
{
  # Parameters defining and configuring the fragment generator to be used
  generator: CRTFragGen 
  fragment_type: CRT # Make sure downstream modules know about this fragment_type!

  indir: "/e/h.0/localdev/readout/data1/OVDAQ/DATA/Run_0000599"

  # Parameters configuring the fragment generator's parent class
  # artdaq::CommandableFragmentGenerator
  fragment_id: 0
  board_id: 0
}  		  

event_builder:
{
  expected_fragments_per_event: 1
  use_art: true
  print_event_store_stats: false
  verbose: false
  events_expected_in_SimpleQueueReader: @local::events_to_generate

  max_fragment_size_bytes: 1000000
  buffer_count: 10
}

physics:
{
  analyzers:
  {
    toyDump:
    {
      module_type: ToyDump
      raw_data_label: daq
      frag_type: @local::fragment_receiver.fragment_type
      num_adcs_to_show: 10   # Obviously this should be no more than ADC counts per fragment
      dump_to_screen: true
    }
  }

  producers:
  {
    artdaqDemoBuildInfo:
    {
      module_type: ArtdaqDemoBuildInfo
      ArtdaqDemoBuildInfo: myInstanceName
    }
  }

  a1: [ toyDump ]
  p1: [ artdaqDemoBuildInfo ]
  e1: [ out1, rootout ]
  end_paths: [ a1, e1 ]
}

outputs:
{

 rootout:
 {
   module_type: RootOutput
   fileName: "driver.root"
   compressionLevel: 0
 }

  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }
}

source:
{
  module_type: RawInput
  waiting_time: 900
  resume_after_timeout: true
  fragment_type_map: [[1, "CRT"] ]
}

process_name: Driver
